use crate::ast::*;

grammar;

use std::str::FromStr;

match {
  // 跳过空白符和注释
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
  // 剩下的情况采用默认方式处理
    _
}

pub Program: Program = {
    "main" "(" ")" <b:Block> => Program{main:b}
};

Block: BlockStatement = {
    "{" <s:Statements> "}" => BlockStatement{statements:s}
};

Statements: Vec<Statement> = {
    => Vec::new(),
    <statement:Statement> ";" <statements:Statements> => {
        let mut stmts = vec![statement];
        stmts.extend(statements.into_iter());
        stmts
    },
};

Statement: Statement = {
    Assignment => Statement::Assignment(<>),
    Conditional => Statement::Conditional(<>),
    Loop => Statement::Loop(<>),
};

Assignment: AssignmentStatement = {
    <i:ID> "=" <expr:Expr> => AssignmentStatement {id:i.to_string(),expression:expr},
};

Conditional: ConditionalStatement = {
    "if" "(" <c:Condition> ")" <block:Block> => ConditionalStatement {condition:c,block:block},
};

Loop: LoopStatement = {
    "while" "(" <c:Condition> ")" <b:Block> => LoopStatement{condition:c,block:b},
};

Expr: Expression = {
    Term => Expression::Term(<>),
    <e:Expr> "+" <t:Term> => Expression::ASOP(AddandSubOp{
        left:Box::new(e),
        opcode:Opcode::Add,
        right:Box::new(t),
    }),
    <e:Expr> "-" <t:Term> => Expression::ASOP(AddandSubOp{
        left:Box::new(e),
        opcode:Opcode::Sub,
        right:Box::new(t),
    }),
};

RelOp: RelationalOperator = {
    "<" => RelationalOperator::LessThan,
    "<=" => RelationalOperator::LessEqual,
    ">" => RelationalOperator::GreaterThan,
    ">=" => RelationalOperator::GreaterEqual,
    "==" => RelationalOperator::Equal,
    "!=" => RelationalOperator::NotEqual,
}

Condition: Condition = {
    <l:Expr> <o:RelOp> <r:Expr> => Condition{
        left:l,
        operator:o,
        right:r,
    }
}

Term: Term = {
    Factor => Term::Factor(<>),
    <t:Term> "*" <f:Factor> => Term::Multiply(Box::new(t),Box::new(f)),
    <t:Term> "/" <f:Factor> => Term::Divide(Box::new(t),Box::new(f)),
};

Factor: Factor = {
    ID => Factor::Identifier(<>.to_string()),
    Num => Factor::Number(<>),
    "(" <e:Expr> ")" => Factor::Expr(Box::new(e)),
};

ID: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*">=> s.to_string();
Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();